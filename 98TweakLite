#!/system/bin/sh
#
# file: /system/etc/init.d/98spicaTweakLite v1.8
# - adapted from "SSSwitch by voku1987 [voku(at)voku-online(dot)de] (Screen State Switch Lite)"
#  

# TAKE NOTE THAT LINES PRECEDED BY A "#" IS COMMENTED OUT!

# =========
# One-time tweaks to apply on every boot;
# =========
STL=`ls -d /sys/block/stl*`;	
BML=`ls -d /sys/block/bml*`;
MMC=`ls -d /sys/block/mmc*`;
ZRM=`ls -d /sys/block/zram*`;
MTD=`ls -d /sys/block/mtd*`;

# =========
# Remount all partitions
# =========
for j in $(busybox mount | cut -d " " -f3);
do
	sync;
	busybox mount -o remount,noatime,nodiratime $j;
done;

for k in $(busybox mount | grep relatime | cut -d " " -f3);
do
	sync;
	busybox mount -o remount,noatime,nodiratime $k;
done;

for m in $(busybox mount | grep ext[3-4] | cut -d " " -f3);
do
	sync;
	busybox mount -o remount,noatime,nodiratime,delalloc,noauto_da_alloc,commit=15 $m;
done;


# =========
# Optimize io scheduler
# =========
for z in $ZRM; do

	if [ -e $i/queue/rotational ]; then
		echo "0" > $i/queue/rotational;
	fi;

	if [ -e $i/queue/iostats ]; then
		echo "0" > $i/queue/iostats;
	fi;

	if [ -e $i/queue/rq_affinity ]; then
		echo "1" > $i/queue/rq_affinity;
	fi;

	if [ -e $i/queue/read_ahead_kb ]; then
		echo "512" >  $i/queue/read_ahead_kb;
	fi;

	if [ -e $i/queue/max_sectors_kb ]; then
		echo "512" >  $i/queue/max_sectors_kb; # default: 127
	fi;

done;

for i in $STL $BML $MMC $MTD; do

	if [ -e $i/queue/scheduler ]; then
		echo $scheduler > $i/queue/scheduler;
	fi;

	if [ -e $i/queue/rotational ]; then
		echo "0" > $i/queue/rotational;
	fi;

	if [ -e $i/queue/iostats ]; then
		echo "0" > $i/queue/iostats;
	fi;

	if [ -e $i/queue/rq_affinity ]; then
		echo "1" > $i/queue/rq_affinity;   
	fi;

	if [ -e $i/queue/read_ahead_kb ]; then
		echo "1024" >  $i/queue/read_ahead_kb; # default: 128
	fi;

	if [ -e $i/queue/max_sectors_kb ]; then
		echo "1024" >  $i/queue/max_sectors_kb; # default: 512
	fi;

	if [ -e $i/queue/nr_requests ]; then
		echo "128" > $i/queue/nr_requests; # default: 128
	fi;

	if [ -e $i/queue/iosched/writes_starved ]; then
		echo "1" > $i/queue/iosched/writes_starved;
	fi;

	if [ -e $i/queue/iosched/back_seek_max ]; then
		echo "16384" > $i/queue/iosched/back_seek_max; # default: 16384
	fi;

	if [ -e $i/queue/iosched/max_budget_async_rq ]; then
		echo "2" > $i/queue/iosched/max_budget_async_rq; # default: 4
	fi;

	if [ -e $i/queue/iosched/back_seek_penalty ]; then
		echo "1" > $i/queue/iosched/back_seek_penalty; # default: 2
	fi;

	if [ -e $i/queue/iosched/fifo_expire_sync ]; then
		echo "125" > $i/queue/iosched/fifo_expire_sync; # default: 125
	fi;

	if [ -e $i/queue/iosched/timeout_sync ]; then
		echo "4" > $i/queue/iosched/timeout_sync; # default: HZ / 8
	fi;

	if [ -e $i/queue/iosched/fifo_expire_async ]; then
		echo "250" > $i/queue/iosched/fifo_expire_async; # default: 250
	fi;

	if [ -e $i/queue/iosched/timeout_async ]; then
		echo "2" > $i/queue/iosched/timeout_async; # default: HZ / 25
	fi;

	if [ -e $i/queue/iosched/slice_idle ]; then
		echo "2" > $i/queue/iosched/slice_idle; # default: 8
	fi;

	if [ -e $i/queue/iosched/quantum ]; then
		echo "8" > $i/queue/iosched/quantum; # default: 4
	fi;

	if [ -e $i/queue/iosched/slice_async_rq ]; then
		echo "2" > $i/queue/iosched/slice_async_rq; # default: 2
	fi;

	if [ -e $i/queue/iosched/fifo_batch ]; then
		echo "1" > $i/queue/iosched/fifo_batch;
	fi;

	if [ -e $i/queue/iosched/rev_penalty ]; then
		echo "1" > $i/queue/iosched/rev_penalty;
	fi;

	if [ -e $i/queue/iosched/low_latency ]; then
		echo "1" > $i/queue/iosched/low_latency;
	fi;

done;

# =========
# FS-TWEAKS
# =========
/system/xbin/echo "10" > /proc/sys/fs/lease-break-time;

# =========
# TWEAKS: for TCP read/write
# =========
echo "0" > /proc/sys/net/ipv4/tcp_timestamps;
echo "1" > /proc/sys/net/ipv4/tcp_tw_reuse;
echo "1" > /proc/sys/net/ipv4/tcp_sack;
echo "1" > /proc/sys/net/ipv4/tcp_tw_recycle;
echo "1" > /proc/sys/net/ipv4/tcp_window_scaling;
echo "1" > /proc/sys/net/ipv4/tcp_moderate_rcvbuf;
echo "1" > /proc/sys/net/ipv4/route/flush;
echo "2" > /proc/sys/net/ipv4/tcp_syn_retries;
echo "2" > /proc/sys/net/ipv4/tcp_synack_retries;
echo "10" > /proc/sys/net/ipv4/tcp_fin_timeout;
echo "0" > /proc/sys/net/ipv4/tcp_ecn;
echo "256960" > /proc/sys/net/core/wmem_max;
echo "563200" > /proc/sys/net/core/rmem_max;
echo "256960" > /proc/sys/net/core/rmem_default;
echo "256960" > /proc/sys/net/core/wmem_default;
echo "20480" > /proc/sys/net/core/optmem_max;
echo "4096 16384 110208" > /proc/sys/net/ipv4/tcp_wmem;
echo "4096 87380 563200" > /proc/sys/net/ipv4/tcp_rmem;
echo "4096" > /proc/sys/net/ipv4/udp_rmem_min;
echo "4096" > /proc/sys/net/ipv4/udp_wmem_min;
setprop net.tcp.buffersize.default 4096,87380,563200,4096,16384,110208;
setprop net.tcp.buffersize.wifi    4095,87380,563200,4096,16384,110208;
setprop net.tcp.buffersize.umts    4094,87380,563200,4096,16384,110208;
setprop net.tcp.buffersize.edge    4093,26280,35040,4096,16384,35040;
setprop net.tcp.buffersize.gprs    4092,8760,11680,4096,8760,11680;
setprop net.tcp.buffersize.evdo_b  4094,87380,262144,4096,16384,262144;
setprop net.tcp.buffersize.hspa    4092,87380,563200,4096,16384,110208;

# =========
# TWEAKS: optimized for 4G/Edge speed
# =========
setprop ro.ril.hep 1;
setprop ro.ril.enable.dtm 1;
setprop ro.ril.enable.a53 1;
setprop ro.ril.enable.3g.prefix 1;
setprop ro.ril.enable.a52 1;
setprop ro.ril.enable.a53 1;
setprop ro.ril.emc.mode 2;
setprop ro.ril.hsxpa 2;
setprop ro.ril.hsupa.category 5;
setprop ro.ril.hsdpa.category 8;
setprop ro.ril.gprsclass 12;

# =========
# TWEAKS
# =========
setprop persist.sys.use_dithering 1;
setprop persist.sys.ui.hw true;
setprop hwui.render_dirty_regions false;
setprop windowsmgr.max_events_per_sec 120;
setprop profiler.force_disable_err_rpt 1;
setprop profiler.force_disable_ulog 1;
setprop debug.performance.tuning 1; 
setprop video.accelerate.hw 1;
setprop debug.sf.hw 1;
setprop ro.telephony.call_ring.delay 1000;
setprop wifi.supplicant_scan_interval 180;
setprop windowsmgr.max_events_per_sec 60;
setprop ro.media.dec.jpeg.memcap 20000000;
setprop ro.media.enc.jpeg.quality 90,80,70;
setprop dalvik.vm.startheapsize 12m;
setprop dalvik.vm.heapsize 32m;
sysctl -w kernel.sem="500 512000 100 2048";
sysctl -w kernel.shmmax="268435456";
#/system/xbin/echo "8" > /proc/sys/vm/page-cluster;
##/system/xbin/echo "1" > /proc/sys/kernel/sched_compat_yield;
#/system/xbin/echo "0" > /proc/sys/kernel/sched_child_runs_first;
#/system/xbin/echo "256000" > /proc/sys/kernel/sched_shares_ratelimit;
#/system/xbin/echo "64000" > /proc/sys/kernel/msgmni;
#/system/xbin/echo "64000" > /proc/sys/kernel/msgmax;
#/system/xbin/echo "500 512000 64 2048" > /proc/sys/kernel/sem;
#/system/xbin/echo "5000" > /proc/sys/kernel/threads-max;
/system/xbin/echo "1" > /proc/sys/vm/oom_kill_allocating_task;
/system/xbin/echo "0" > /proc/sys/vm/panic_on_oom;

# =========
# BATTERY-TWEAKS
# =========
setprop wifi.supplicant_scan_interval 240 
setprop pm.sleep_mode 1

for i in $(ls /sys/bus/usb/devices/*/power/level);
do
	echo "auto" > $i;
done;

# =========
# CPU-TWEAKS
# =========
SYSTEM_GOVERNOR=`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor`

if [ $SYSTEM_GOVERNOR == "ondemand" ]; then
	echo "120000" > /sys/devices/system/cpu/cpufreq/ondemand/sampling_rate;
	echo "90" > /sys/devices/system/cpu/cpufreq/ondemand/up_threshold;
	echo "5" > /sys/devices/system/cpu/cpufreq/ondemand/down_differential;
	echo "1" > /sys/devices/system/cpu/cpufreq/ondemand/sampling_down_factor;
	echo "20" > /sys/devices/system/cpu/cpufreq/ondemand/freq_step;
fi;

if [ $SYSTEM_GOVERNOR == "conservative" ]; then
	echo "120000" > /sys/devices/system/cpu/cpufreq/ondemand/sampling_rate;
	echo "20" > /sys/devices/system/cpu/cpufreq/conservative/freq_step;
	echo "1" > /sys/devices/system/cpu/cpufreq/conservative/sampling_down_factor;
	echo "40" > /sys/devices/system/cpu/cpufreq/conservative/down_threshold;
	echo "90" > /sys/devices/system/cpu/cpufreq/conservative/up_threshold;
fi;

# =========
# MEMORY-TWEAKS
# =========
/system/xbin/echo "0" > /proc/sys/vm/swappiness;
/system/xbin/echo "50" > /proc/sys/vm/vfs_cache_pressure;
/system/xbin/echo "4" > /proc/sys/vm/min_free_order_shift;
/system/xbin/echo "0" > /sys/module/lowmemorykiller/parameters/debug_level;
/system/xbin/echo "2048" > /proc/sys/vm/min_free_kbytes;
/system/xbin/echo "1000" > /proc/sys/vm/dirty_expire_centisecs;
/system/xbin/echo "1000" > /proc/sys/vm/dirty_writeback_centisecs;
#/system/xbin/echo "22" > /proc/sys/vm/dirty_ratio;
#/system/xbin/echo "4" > /proc/sys/vm/dirty_background_ratio;
/system/xbin/echo "3" > /proc/sys/vm/drop_caches;
/system/xbin/echo "1" > /proc/sys/vm/overcommit_memory;
/system/xbin/echo "0,1,2,4,6,15" > /sys/module/lowmemorykiller/parameters/adj;
/system/xbin/echo "0" > /sys/module/lowmemorykiller/parameters/debug_level;
/system/xbin/echo "64" > /sys/module/lowmemorykiller/parameters/cost;
# Define the memory thresholds at which the above process classes will
# be killed. These numbers are in pages (4k) -> (1 MB * 1024) / 4 = 256
FOREGROUND_APP_MEM=2048;
VISIBLE_APP_MEM=3072;
SECONDARY_SERVER_MEM=4096;
BACKUP_APP_MEM=4096;
HOME_APP_MEM=4096;
HIDDEN_APP_MEM=5120;
CONTENT_PROVIDER_MEM=6656;
EMPTY_APP_MEM=23040;
/system/xbin/echo "$FOREGROUND_APP_MEM,$VISIBLE_APP_MEM,$SECONDARY_SERVER_MEM,$HIDDEN_APP_MEM,$CONTENT_PROVIDER_MEM,$EMPTY_APP_MEM" > /sys/module/lowmemorykiller/parameters/minfree;

# =========
# SQLite tweaks
# =========
#for i in `find /data -iname "*.db"`;
#do
#	/system/xbin/sqlite3 $i 'VACUUM;';
#	/system/xbin/sqlite3 $i 'REINDEX;'; 
#        /system/xbin/sqlite3 $i 'PRAGMA journal_mode = WAL;'; 
#        /system/xbin/sqlite3 $i 'PRAGMA temp_store = MEMORY;';  
#        /system/xbin/sqlite3 $i 'PRAGMA count_changes = OFF;';  
#        /system/xbin/sqlite3 $i 'PRAGMA synchronous = OFF;';  
#        /system/xbin/sqlite3 $i 'PRAGMA auto_vacuum = FULL;';  
#        /system/xbin/sqlite3 $i 'PRAGMA wal_autocheckpoint = 0;';   
#done;
#for i in `find /sdcard -iname "*.db"`;
#do
#	/system/xbin/sqlite3 $i 'VACUUM;';
#	/system/xbin/sqlite3 $i 'REINDEX;'; 
#        /system/xbin/sqlite3 $i 'PRAGMA journal_mode = WAL;'; 
#        /system/xbin/sqlite3 $i 'PRAGMA temp_store = MEMORY;';  
#        /system/xbin/sqlite3 $i 'PRAGMA count_changes = OFF;';  
#        /system/xbin/sqlite3 $i 'PRAGMA synchronous = OFF;';  
#        /system/xbin/sqlite3 $i 'PRAGMA auto_vacuum = FULL;';  
#        /system/xbin/sqlite3 $i 'PRAGMA wal_autocheckpoint = 0;';   
#done;
#/system/xbin/fix_permissions;

# =========
# zipalign-TWEAKS
# =========
#LOG_FILE=/data/zipalign.log;
#ZIPALIGNDB=/data/zipalign.db;
#if [ -e $LOG_FILE ]; then
#	rm $LOG_FILE;
#fi;
#
#if [ ! -f $ZIPALIGNDB ]; then
#	touch $ZIPALIGNDB;
#fi;
#/system/xbin/echo "Starting FV Automatic ZipAlign $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $LOG_FILE;
#for DIR in /system/app /system/framework; 
#do
#	cd $DIR;
#	for APK in *.apk *.jar;
#	do
#			zipalign -c 4 $APK;
# 			if [ $? -eq 0 ]; 
#			then
#				/system/xbin/echo "Already aligned: $DIR/$APK" | tee -a $LOG_FILE;
# 				grep "$DIR/$APK" $ZIPALIGNDB > /dev/null || echo $DIR/$APK >> $ZIPALIGNDB;
#			else
#				/system/xbin/echo "Now aligning: $DIR/$APK" | tee -a $LOG_FILE;
#				zipalign -f 4 $APK /cache/$APK;
#				busybox mount -o rw,remount /system;
#				cp -f -p /cache/$APK $APK;
#				busybox rm -f /cache/$APK;
#				grep "$DIR/$APK" $ZIPALIGNDB > /dev/null || echo $DIR/$APK >> $ZIPALIGNDB;
#			fi;
#	done;
#done;
#busybox mount -o ro,remount /system;
#sleep 3;
#touch $ZIPALIGNDB;
#/system/xbin/echo "Automatic ZipAlign finished at $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $LOG_FILE;

# =========
# Firewall-TWEAKS
# =========
# ping/icmp protection
echo "1" > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts;
echo "1" > /proc/sys/net/ipv4/icmp_echo_ignore_all;
echo "1" > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses;

if [ -e /proc/sys/net/ipv6/icmp_echo_ignore_broadcasts ]; then
	echo "1" > /proc/sys/net/ipv6/icmp_echo_ignore_broadcasts;
fi;

if [ -e /proc/sys/net/ipv6/icmp_echo_ignore_all ]; then
	echo "1" > /proc/sys/net/ipv6/icmp_echo_ignore_all;
fi;

if [ -e /proc/sys/net/ipv6/icmp_ignore_bogus_error_responses ]; then
	echo "1" > /proc/sys/net/ipv6/icmp_ignore_bogus_error_responses;
fi;

# syn protection
if [ -e /proc/sys/net/ipv4/tcp_synack_retries ]; then
	echo "10" > /proc/sys/net/ipv4/tcp_synack_retries;
fi;

if [ -e /proc/sys/net/ipv6/tcp_synack_retries ]; then
	echo "10" > /proc/sys/net/ipv6/tcp_synack_retries;
fi;

if [ -e /proc/sys/net/ipv6/tcp_syncookies ]; then
	echo "0" > /proc/sys/net/ipv6/tcp_syncookies;
fi;

if [ -e /proc/sys/net/ipv4/tcp_syncookies ]; then
	echo "3" > /proc/sys/net/ipv4/tcp_syncookies;
fi;

# IPv6 privacy tweak
echo "2" > /proc/sys/net/ipv6/conf/all/use_tempaddr;

# drop spoof, redirects, etc
echo "1" > /proc/sys/net/ipv4/conf/all/rp_filter;
echo "1" > /proc/sys/net/ipv4/conf/default/rp_filter;
echo "0" > /proc/sys/net/ipv4/conf/all/send_redirects;
echo "0" > /proc/sys/net/ipv4/conf/default/send_redirects;
echo "0" > /proc/sys/net/ipv4/conf/default/accept_redirects;
echo "0" > /proc/sys/net/ipv4/conf/all/accept_source_route;
echo "0" > /proc/sys/net/ipv4/conf/default/accept_source_route;

if [ -e /proc/sys/net/ipv6/conf/all/rp_filter ]; then
	echo "1" > /proc/sys/net/ipv6/conf/all/rp_filter;
fi;

if [ -e /proc/sys/net/ipv6/conf/default/rp_filter ]; then
	echo "1" > /proc/sys/net/ipv6/conf/default/rp_filter;
fi;

if [ -e /proc/sys/net/ipv6/conf/all/send_redirects ]; then
	echo "0" > /proc/sys/net/ipv6/conf/all/send_redirects;
fi;

if [ -e /proc/sys/net/ipv6/conf/default/send_redirects ]; then
	echo "0" > /proc/sys/net/ipv6/conf/default/send_redirects;
fi;

if [ -e /proc/sys/net/ipv6/conf/default/accept_redirects ]; then
	echo "0" > /proc/sys/net/ipv6/conf/default/accept_redirects;
fi;

if [ -e /proc/sys/net/ipv6/conf/all/accept_source_route ]; then
	echo "0" > /proc/sys/net/ipv6/conf/all/accept_source_route;
fi;

if [ -e /proc/sys/net/ipv6/conf/default/accept_source_route ]; then
	echo "0" > /proc/sys/net/ipv6/conf/default/accept_source_route;
fi;

# =========
# Renice - kernel thread responsible for managing the memory
# =========
renice 19 `pidof kswapd0`;
renice 19 `pgrep logcat`;
renice -10 `pidof com.android.phone`;
renice -5 `pidof android.process.media`;

# =========
# battery-calibration if battery is full
# =========
LEVEL=`cat /sys/class/power_supply/battery/capacity`;
CURR_ADC=`cat /sys/class/power_supply/battery/batt_current_adc`;
BATTFULL=`cat /sys/class/power_supply/battery/batt_full_check`;
echo "*** LEVEL: $LEVEL - CUR: $CURR_ADC ***"
if [ "$LEVEL" == "100" ] && [ "$BATTFULL" == "1" ]; then
	rm -f /data/system/batterystats.bin;
	echo "battery-calibration done ...";
fi;

# =========
# CLEANING-TWEAKS
# =========
rm -rf /data/lost+found/* 2> /dev/null;
rm -rf /system/lost+found/* 2> /dev/null;
rm -rf /preload/lost+found/* 2> /dev/null;
rm -rf /cache/lost+found/* 2> /dev/null;
rm -rf /data/tombstones/* 2> /dev/null;
rm -rf /data/anr/* 2> /dev/null;

log -p i -t Tweak_Lite_v1.8 "*** BOOT tweaks ***: applied miscellaneous performance tweaks";
